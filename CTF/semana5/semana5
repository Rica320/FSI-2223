
Nós já sabemos que dá para abrir e ler um ficheiro da nossa escolha como vimos no CTF anterior. 

Neste segundo desafio, temos agora 3 buffers para preencher.
Comecamos a escrever no buffer[20], dps val[4] e por fim, o que realmente precisamos, o mem_file[8] para controlar o ficheiro q abrimos e atingir a flag em flag.txt como no anterior. 

    char meme_file[8] = "mem.txt\0";
    char val[4] = "\xef\xbe\xad\xde";
    char buffer[20];

Só que desta vez temos um problema!! O programa verifica a integridade do val[4] com a linha 
	
	if(*(int*)val == 0xfefc2223)

portanto, temos de dar overflow e escrever nos 3 arrays e garantir q o val[] tem o valor hexadecimal 0xfefc2223 para o programa nos mostrar a flag.

1[] - aaaaaaaaaaaaaaaaaaaa
2[] - 0xfefc2223
3[] - flag.txt


Temos de descobrir como manter o hexadecimal. Tomando partido do ascii code, vamos procurar os chars cujo ascii seja o represendado pelos chars 0xFE 0xFC 0x22 0x23.

Usando um chars.c criado por nos para printar os chars, temos:

#"�� (ver foto)

Assim o input a dar para ter overflow será

aaaaaaaaaaaaaaaaaaaa#"��flag.txt

Como o terminal não lida corretamente com estes chars, temos de passar logo o output do ./chars para o ./program! Ficamos com isto:

(ver imagem)

Aplicando isto agora ao site...

(ver imagem)







